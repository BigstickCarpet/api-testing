{
	"info": {
		"name": "Super Tech Heroes API Tests",
		"_postman_id": "d09a057f-f799-126a-03db-5edd0749df2d",
		"description": "API_DESCRIPTION",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test fixtures",
			"description": "",
			"item": [
				{
					"name": "Initialize environment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Generate a unique API Key to prevent conflicts with",
									"// other people who are running these tests at the same time",
									"pm.environment.set('API_KEY', Date.now().toString());",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{API_KEY}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{API_ROOT}}",
							"host": [
								"{{API_ROOT}}"
							]
						},
						"description": "This request initializes environment variables that are used throughout this collection."
					},
					"response": []
				},
				{
					"name": "Download OpenAPI definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set('openAPI', pm.response.text());",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{API_KEY}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{API_ROOT}}/schema",
							"host": [
								"{{API_ROOT}}"
							],
							"path": [
								"schema"
							]
						},
						"description": "This request downloads the OpenAPI (fka Swagger) definition for the Super Tech Heroes API and stores it in a Postman variable.  Many tests in this collection validate API responses against the JSON Schemas in the OpenAPI definition."
					},
					"response": []
				},
				{
					"name": "Helpers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set('helpers', `(${helpers}())`);",
									"",
									"function helpers () {",
									"    API_ROOT = pm.environment.get('API_ROOT');",
									"    openAPI = JSON.parse(pm.environment.get('openAPI'));",
									"    ",
									"    /**",
									"     * Deletes all characters, so that tests can start-off from an empty state",
									"     */",
									"    resetState = () => {",
									"        let request = { ",
									"            method: 'DELETE', ",
									"            url: '{{API_ROOT}}/characters', ",
									"            header: [",
									"                { key: 'X-API-Key', value: '{{API_KEY}}' },",
									"            ]",
									"        };",
									"        ",
									"        pm.sendRequest(request, (err, response) => {",
									"            assertSuccessfulResponse(response, 200);",
									"        });",
									"    };",
									"    ",
									"    /**",
									"     * Returns the specified response header (case-insensitive)",
									"     */",
									"    getHeader = (response, name) => {",
									"        name = name.toLowerCase();",
									"        let header = response.headers.find(({ key }) => key.toLowerCase() === name);",
									"        if (header) {",
									"            return header.value;",
									"        }",
									"    };",
									"    ",
									"    /**",
									"     * Asserts that the response was successful and has the specified status code",
									"     */",
									"    assertSuccessfulResponse = (response, status) => {",
									"        pm.expect(response).to.be.an('object');",
									"        pm.expect(response.code).to.be.a('number').at.least(200).and.below(400);",
									"        pm.expect(response.code).to.equal(status);",
									"",
									"        let contentType = getHeader(response, 'content-type');",
									"        pm.expect(contentType).to.be.a('string').and.include('application/json');",
									"    };",
									"    ",
									"    /**",
									"     * Asserts that the response was an error and has the specified status code",
									"     */",
									"    assertErrorResponse = (response, status) => {",
									"        pm.expect(response).to.be.an('object');",
									"        pm.expect(response.code).to.be.a('number').at.least(400).and.below(600);",
									"        pm.expect(response.code).to.equal(status);",
									"",
									"        let contentType = getHeader(response, 'content-type');",
									"        pm.expect(contentType).to.be.a('string').and.include('application/json');",
									"    ",
									"        // Validate the response body against the OpenAPI schema",
									"        assertJSONSchema(response.json(), openAPI.components.schemas.ErrorResponse);",
									"    };",
									"        ",
									"    /**",
									"     * Asserts that the character is valid and has the expected property values",
									"     */",
									"    assertCharacter = (character, expected) => {",
									"        // Validate the character against the OpenAPI schema",
									"        assertJSONSchema(character, openAPI.components.schemas.CharacterResponse);",
									"    ",
									"        // The HATEOAS links should all be relative to the API_ROOT",
									"        for (let key of Object.keys(character.links)) {",
									"          var link = character.links[key];",
									"          pm.expect(link.substr(0, API_ROOT.length)).to.equal(API_ROOT);",
									"          pm.expect(link.substr(API_ROOT.length)).to.match(/^\\/characters\\/[a-z0-9]+$/);",
									"        }",
									"    ",
									"        // Make sure the character's properties have the expected values",
									"        for (let key of Object.keys(expected)) {",
									"          var actualValue = character[key];",
									"          var expectedValue = expected[key];",
									"          pm.expect(actualValue).to.deep.equal(expectedValue);",
									"        }",
									"    };",
									"    ",
									"    /**",
									"     * Validates the given object against the JSON Schema",
									"     */",
									"    assertJSONSchema = (data, schema) => {",
									"        let isValid = tv4.validate(data, schema);",
									"        if (!isValid) {",
									"            throw tv4.error;",
									"        }",
									"    };",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{API_KEY}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{API_ROOT}}",
							"host": [
								"{{API_ROOT}}"
							]
						},
						"description": "This request creates helper functions and variables that are used throughout this collection to reduce redundancy. The helpers are stored in a Postman variable named \"helpers\".  Use the JavaScript `eval()` function to load the helpers.  For example:\n\n```javascript\n// Load our helpers\neval(pm.environment.get('helpers'));\n```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all characters",
			"description": "",
			"item": [
				{
					"name": "No characters",
					"description": "",
					"item": [
						{
							"name": "Get all characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Load our helper functions",
											"eval(pm.environment.get('helpers'));",
											"",
											"pm.test('Successful response', () => {",
											"    assertSuccessfulResponse(pm.response, 200);",
											"});",
											"",
											"pm.test('Response is an empty array', () => {",
											"    pm.expect(pm.response.json()).to.be.an('array').with.lengthOf(0);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Load our helper functions",
											"eval(pm.environment.get('helpers'));",
											"",
											"// Delete all existing characters",
											"resetState();",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{API_KEY}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{API_ROOT}}/characters",
									"host": [
										"{{API_ROOT}}"
									],
									"path": [
										"characters"
									]
								},
								"description": "There are no characters, so the response should be an empty array - NOT an error"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Single character",
					"description": "",
					"item": [
						{
							"name": "Create a character",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Load our helpers",
											"eval(pm.environment.get('helpers'));",
											"",
											"pm.test('Successful response', () => {",
											"    assertSuccessfulResponse(pm.response, 201);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Load our helpers",
											"eval(pm.environment.get('helpers'));",
											"",
											"// Delete all existing characters",
											"resetState();",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{API_KEY}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"name\": \"Super Coder\", \n\t\"powers\": [\n\t\t\"10x-ing\"\n\t]\n}"
								},
								"url": {
									"raw": "{{API_ROOT}}/characters",
									"host": [
										"{{API_ROOT}}"
									],
									"path": [
										"characters"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get all characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Load our helper functions",
											"eval(pm.environment.get('helpers'));",
											"",
											"pm.test('Successful response', () => {",
											"    assertSuccessfulResponse(pm.response, 200);",
											"});",
											"",
											"pm.test('The correct character was returned', () => {",
											"    pm.expect(pm.response.json()).to.be.an('array').with.lengthOf(1);",
											"",
											"    let character = pm.response.json()[0];",
											"    assertCharacter(character, {",
											"      name: 'Super Coder',",
											"      type: 'hero',",
											"      powers: ['10x-ing'],",
											"      links: {",
											"        self: API_ROOT + '/characters/supercoder',",
											"      }",
											"    });",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{API_KEY}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{API_ROOT}}/characters",
									"host": [
										"{{API_ROOT}}"
									],
									"path": [
										"characters"
									]
								},
								"description": "The response should be an array containing the character that we just created"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Multiple characters",
					"description": "",
					"item": [
						{
							"name": "Create character 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Load our helper functions",
											"eval(pm.environment.get('helpers'));",
											"",
											"pm.test('Successful response', () => {",
											"    assertSuccessfulResponse(pm.response, 201);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Load our helper functions",
											"eval(pm.environment.get('helpers'));",
											"",
											"// Delete all existing characters",
											"resetState();",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{API_KEY}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"name\": \"Web Standards Woman\", \n\t\"powers\": [\n\t\t\"backward-compatibility\"\n\t]\n}"
								},
								"url": {
									"raw": "{{API_ROOT}}/characters",
									"host": [
										"{{API_ROOT}}"
									],
									"path": [
										"characters"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create character 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Load our helper functions",
											"eval(pm.environment.get('helpers'));",
											"",
											"pm.test('Successful response', () => {",
											"    assertSuccessfulResponse(pm.response, 201);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{API_KEY}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"name\": \"The Fantastic Four Spaces\", \n\t\"powers\": [\n\t\t\"being objectively better than tabs\"\n\t]\n}"
								},
								"url": {
									"raw": "{{API_ROOT}}/characters",
									"host": [
										"{{API_ROOT}}"
									],
									"path": [
										"characters"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Create character 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Load our helper functions",
											"eval(pm.environment.get('helpers'));",
											"",
											"pm.test('Successful response', () => {",
											"    assertSuccessfulResponse(pm.response, 201);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{API_KEY}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"name\": \"The Incredible MVP\", \n\t\"powers\": [\n\t\t\"non-viability\", \n\t\t\"justification\"\n\t]\n}"
								},
								"url": {
									"raw": "{{API_ROOT}}/characters",
									"host": [
										"{{API_ROOT}}"
									],
									"path": [
										"characters"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "Get all characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Load our helper functions",
											"eval(pm.environment.get('helpers'));",
											"",
											"pm.test('Successful response', () => {",
											"    assertSuccessfulResponse(pm.response, 200);",
											"});",
											"",
											"pm.test('The correct characters were returned', () => {",
											"    pm.expect(pm.response.json()).to.be.an('array').with.lengthOf(3);",
											"",
											"    // The characters should be sorted by name",
											"    let fantasticFourSpaces = pm.response.json()[0];",
											"    let incredibleMVP = pm.response.json()[1];",
											"    let webStandardsWoman = pm.response.json()[2];",
											"    ",
											"    assertCharacter(fantasticFourSpaces, {",
											"      name: 'The Fantastic Four Spaces',",
											"      type: 'hero',",
											"      powers: ['being objectively better than tabs'],",
											"      links: {",
											"        self: API_ROOT + '/characters/thefantasticfourspaces',",
											"      }",
											"    });",
											"    ",
											"    assertCharacter(incredibleMVP, {",
											"      name: 'The Incredible MVP',",
											"      type: 'hero',",
											"      powers: ['non-viability', 'justification'],",
											"      links: {",
											"        self: API_ROOT + '/characters/theincrediblemvp',",
											"      }",
											"    });",
											"    ",
											"    assertCharacter(webStandardsWoman, {",
											"      name: 'Web Standards Woman',",
											"      type: 'hero',",
											"      powers: ['backward-compatibility'],",
											"      links: {",
											"        self: API_ROOT + '/characters/webstandardswoman',",
											"      }",
											"    });",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Key",
										"value": "{{API_KEY}}"
									}
								],
								"body": {},
								"url": {
									"raw": "{{API_ROOT}}/characters",
									"host": [
										"{{API_ROOT}}"
									],
									"path": [
										"characters"
									]
								},
								"description": "The response should contain all three of the characters that we just created"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Multiple related characters",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Search for characters",
			"description": "",
			"item": [
				{
					"name": "Query w/ no matches",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Query by name",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Query by type",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Query by name and type",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Get a specific character",
			"description": "",
			"item": [
				{
					"name": "Correct result",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Non-existent character",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Related characters",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Create characters",
			"description": "",
			"item": [
				{
					"name": "Single character",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Multiple related characters",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Duplicate name",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Update characters",
			"description": "",
			"item": [
				{
					"name": "Update a character",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Unset properties",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Change related characters",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Rename a character",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Related characters don't exist",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "Related characters w/ wrong types ",
					"description": "",
					"item": [],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}